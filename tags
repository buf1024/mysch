!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AF_LOCAL	anet.h	43;"	d
AL_FREE	dlist.h	95;"	d
AL_NO_FREE	dlist.h	96;"	d
AL_START_HEAD	dlist.h	92;"	d
AL_START_TAIL	dlist.h	93;"	d
ANET_CONNECT_NONBLOCK	anet.c	234;"	d	file:
ANET_CONNECT_NONE	anet.c	233;"	d	file:
ANET_ERR	anet.h	35;"	d
ANET_ERR_LEN	anet.h	36;"	d
ANET_H	anet.h	32;"	d
ANET_IP_ONLY	anet.h	40;"	d
ANET_NONE	anet.h	39;"	d
ANET_OK	anet.h	34;"	d
ASSERT_BINEQ	test/ctest.h	1139;"	d
ASSERT_BINNEQ	test/ctest.h	1151;"	d
ASSERT_EQ	test/ctest.h	1069;"	d
ASSERT_FALSE	test/ctest.h	1173;"	d
ASSERT_NEQ	test/ctest.h	1086;"	d
ASSERT_STRCASEEQ	test/ctest.h	1120;"	d
ASSERT_STRCASENEQ	test/ctest.h	1129;"	d
ASSERT_STREQ	test/ctest.h	1102;"	d
ASSERT_STRNEQ	test/ctest.h	1111;"	d
ASSERT_TRUE	test/ctest.h	1164;"	d
CC	Makefile	/^CC = cc$/;"	m
CC	test/Makefile	/^CC = cc$/;"	m
CCFLAGS	Makefile	/^CCFLAGS = -Wall -g$/;"	m
CCFLAGS	test/Makefile	/^CCFLAGS = -I..\/ -Wall -g$/;"	m
C_TEST_APP	test/main.c	8;"	d	file:
DATE_FORMAT_1	util.h	15;"	d
DATE_FORMAT_2	util.h	16;"	d
DATE_TIME_FORMAT_1	util.h	13;"	d
DATE_TIME_FORMAT_2	util.h	14;"	d
DICT_ERR	dict.h	44;"	d
DICT_HT_INITIAL_SIZE	dict.h	86;"	d
DICT_NOTUSED	dict.h	48;"	d
DICT_OK	dict.h	43;"	d
DICT_STATS_VECTLEN	dict.c	680;"	d	file:
EXPECT_BINEQ	test/ctest.h	1029;"	d
EXPECT_BINNEQ	test/ctest.h	1040;"	d
EXPECT_EQ	test/ctest.h	967;"	d
EXPECT_FALSE	test/ctest.h	1060;"	d
EXPECT_NEQ	test/ctest.h	982;"	d
EXPECT_STRCASEEQ	test/ctest.h	1013;"	d
EXPECT_STRCASENEQ	test/ctest.h	1021;"	d
EXPECT_STREQ	test/ctest.h	997;"	d
EXPECT_STRNEQ	test/ctest.h	1005;"	d
EXPECT_TRUE	test/ctest.h	1051;"	d
EXT_CCFLAGS	Makefile	/^EXT_CCFLAGS = $/;"	m
EXT_CCFLAGS	test/Makefile	/^EXT_CCFLAGS = $/;"	m
INIT_TEST	test/ctest.h	946;"	d
INI_MAX_KEY_LEN	iniconf.h	15;"	d
INI_MAX_VALUE_LEN	iniconf.h	16;"	d
INI_READ_LINE	iniconf.h	17;"	d
LIST_EMPTY	queue.h	406;"	d
LIST_ENTRY	queue.h	371;"	d
LIST_FIRST	queue.h	408;"	d
LIST_FOREACH	queue.h	410;"	d
LIST_FOREACH_FROM	queue.h	415;"	d
LIST_FOREACH_FROM_SAFE	queue.h	425;"	d
LIST_FOREACH_SAFE	queue.h	420;"	d
LIST_HEAD	queue.h	363;"	d
LIST_HEAD_INITIALIZER	queue.h	368;"	d
LIST_INIT	queue.h	430;"	d
LIST_INSERT_AFTER	queue.h	434;"	d
LIST_INSERT_BEFORE	queue.h	443;"	d
LIST_INSERT_HEAD	queue.h	451;"	d
LIST_NEXT	queue.h	459;"	d
LIST_PREV	queue.h	461;"	d
LIST_REMOVE	queue.h	465;"	d
LIST_SWAP	queue.h	478;"	d
LOAD_CONF_NONE	mysch.h	/^    LOAD_CONF_NONE,$/;"	e	enum:__anon2
LOAD_CONF_RELOAD	mysch.h	/^    LOAD_CONF_RELOAD,$/;"	e	enum:__anon2
LOAD_CONF_TEST	mysch.h	/^    LOAD_CONF_TEST,$/;"	e	enum:__anon2
LOG_ALL	log.h	/^    LOG_ALL     = 0,$/;"	e	enum:LogLevel
LOG_DEBUG	log.h	/^    LOG_DEBUG   = 100,$/;"	e	enum:LogLevel
LOG_DEBUG	log.h	13;"	d
LOG_DEFAULT_BUFFER_SIZE	log.c	20;"	d	file:
LOG_DEFAULT_HEAD_SIZE	log.c	19;"	d	file:
LOG_DEFAULT_MAX_PATH	log.c	21;"	d	file:
LOG_ERROR	log.h	/^    LOG_ERROR   = 400,$/;"	e	enum:LogLevel
LOG_ERROR	log.h	28;"	d
LOG_FAIL	log.h	54;"	d
LOG_FATAL	log.h	/^    LOG_FATAL   = 500,$/;"	e	enum:LogLevel
LOG_FATAL	log.h	33;"	d
LOG_FINISH	log.h	51;"	d
LOG_FLUSH	log.h	52;"	d
LOG_INFO	log.h	/^    LOG_INFO    = 200,$/;"	e	enum:LogLevel
LOG_INFO	log.h	18;"	d
LOG_INITIALIZE_DEFAULT	log.h	45;"	d
LOG_OFF	log.h	/^    LOG_OFF     = 600$/;"	e	enum:LogLevel
LOG_REG_CALLBACK	log.h	40;"	d
LOG_START	log.h	50;"	d
LOG_SUCCESS	log.h	55;"	d
LOG_WARN	log.h	/^    LOG_WARN    = 300,$/;"	e	enum:LogLevel
LOG_WARN	log.h	23;"	d
LogLevel	log.h	/^enum LogLevel$/;"	g
MAX_PATH_LEN	util.c	/^    MAX_PATH_LEN = 256,$/;"	e	enum:__anon1	file:
MYSCH	Makefile	/^MYSCH=mysch$/;"	m
MYSCH_MY_OBJ	Makefile	/^MYSCH_MY_OBJ=mysch.o$/;"	m
MYSCH_OBJ	Makefile	/^MYSCH_OBJ=dict.o dlist.o iniconf.o log.o util.o anet.o \\$/;"	m
MY_QUEUE_CREATE	myqueue.c	18;"	d	file:
MY_QUEUE_DESTROY	myqueue.c	25;"	d	file:
MY_QUEUE_NODE_CREATE	myqueue.c	34;"	d	file:
MY_QUEUE_NODE_DESTRORY	myqueue.c	43;"	d	file:
QMD_LIST_CHECK_HEAD	queue.h	382;"	d
QMD_LIST_CHECK_HEAD	queue.h	401;"	d
QMD_LIST_CHECK_NEXT	queue.h	389;"	d
QMD_LIST_CHECK_NEXT	queue.h	402;"	d
QMD_LIST_CHECK_PREV	queue.h	396;"	d
QMD_LIST_CHECK_PREV	queue.h	403;"	d
QMD_SAVELINK	queue.h	121;"	d
QMD_SAVELINK	queue.h	140;"	d
QMD_TAILQ_CHECK_HEAD	queue.h	512;"	d
QMD_TAILQ_CHECK_HEAD	queue.h	536;"	d
QMD_TAILQ_CHECK_NEXT	queue.h	524;"	d
QMD_TAILQ_CHECK_NEXT	queue.h	538;"	d
QMD_TAILQ_CHECK_PREV	queue.h	531;"	d
QMD_TAILQ_CHECK_PREV	queue.h	539;"	d
QMD_TAILQ_CHECK_TAIL	queue.h	519;"	d
QMD_TAILQ_CHECK_TAIL	queue.h	537;"	d
QMD_TRACE_ELEM	queue.h	130;"	d
QMD_TRACE_ELEM	queue.h	138;"	d
QMD_TRACE_HEAD	queue.h	123;"	d
QMD_TRACE_HEAD	queue.h	139;"	d
READ_CONF_INT_MUST	mysch_struct.h	24;"	d
READ_CONF_INT_OPT	mysch_struct.h	37;"	d
READ_CONF_STR_MUST	mysch_struct.h	46;"	d
READ_CONF_STR_OPT	mysch_struct.h	60;"	d
REGISTER_SIGNAL	mysch_struct.h	14;"	d
RUN_ALL_TEST	test/ctest.h	947;"	d
SDS_MAX_PREALLOC	sds.h	34;"	d
SEC_1900_1970	util.c	/^    SEC_1900_1970 = 2208988800UL,$/;"	e	enum:__anon1	file:
SETUP_TEST	test/ctest.h	930;"	d
SET_ENVIRONMENT	test/ctest.h	939;"	d
SLIST_EMPTY	queue.h	165;"	d
SLIST_ENTRY	queue.h	157;"	d
SLIST_FIRST	queue.h	167;"	d
SLIST_FOREACH	queue.h	169;"	d
SLIST_FOREACH_FROM	queue.h	174;"	d
SLIST_FOREACH_FROM_SAFE	queue.h	184;"	d
SLIST_FOREACH_PREVPTR	queue.h	189;"	d
SLIST_FOREACH_SAFE	queue.h	179;"	d
SLIST_HEAD	queue.h	149;"	d
SLIST_HEAD_INITIALIZER	queue.h	154;"	d
SLIST_INIT	queue.h	194;"	d
SLIST_INSERT_AFTER	queue.h	198;"	d
SLIST_INSERT_HEAD	queue.h	203;"	d
SLIST_NEXT	queue.h	208;"	d
SLIST_REMOVE	queue.h	210;"	d
SLIST_REMOVE_AFTER	queue.h	224;"	d
SLIST_REMOVE_HEAD	queue.h	229;"	d
SLIST_SWAP	queue.h	233;"	d
STAILQ_CONCAT	queue.h	259;"	d
STAILQ_EMPTY	queue.h	267;"	d
STAILQ_ENTRY	queue.h	251;"	d
STAILQ_FIRST	queue.h	269;"	d
STAILQ_FOREACH	queue.h	271;"	d
STAILQ_FOREACH_FROM	queue.h	276;"	d
STAILQ_FOREACH_FROM_SAFE	queue.h	286;"	d
STAILQ_FOREACH_SAFE	queue.h	281;"	d
STAILQ_HEAD	queue.h	242;"	d
STAILQ_HEAD_INITIALIZER	queue.h	248;"	d
STAILQ_INIT	queue.h	291;"	d
STAILQ_INSERT_AFTER	queue.h	296;"	d
STAILQ_INSERT_HEAD	queue.h	302;"	d
STAILQ_INSERT_TAIL	queue.h	308;"	d
STAILQ_LAST	queue.h	314;"	d
STAILQ_NEXT	queue.h	318;"	d
STAILQ_REMOVE	queue.h	320;"	d
STAILQ_REMOVE_AFTER	queue.h	334;"	d
STAILQ_REMOVE_HEAD	queue.h	340;"	d
STAILQ_SWAP	queue.h	346;"	d
TAILQ_CONCAT	queue.h	542;"	d
TAILQ_EMPTY	queue.h	553;"	d
TAILQ_ENTRY	queue.h	501;"	d
TAILQ_FIRST	queue.h	555;"	d
TAILQ_FOREACH	queue.h	557;"	d
TAILQ_FOREACH_FROM	queue.h	562;"	d
TAILQ_FOREACH_FROM_SAFE	queue.h	572;"	d
TAILQ_FOREACH_REVERSE	queue.h	577;"	d
TAILQ_FOREACH_REVERSE_FROM	queue.h	582;"	d
TAILQ_FOREACH_REVERSE_FROM_SAFE	queue.h	592;"	d
TAILQ_FOREACH_REVERSE_SAFE	queue.h	587;"	d
TAILQ_FOREACH_SAFE	queue.h	567;"	d
TAILQ_HEAD	queue.h	491;"	d
TAILQ_HEAD_INITIALIZER	queue.h	498;"	d
TAILQ_INIT	queue.h	597;"	d
TAILQ_INSERT_AFTER	queue.h	603;"	d
TAILQ_INSERT_BEFORE	queue.h	618;"	d
TAILQ_INSERT_HEAD	queue.h	628;"	d
TAILQ_INSERT_TAIL	queue.h	641;"	d
TAILQ_LAST	queue.h	651;"	d
TAILQ_NEXT	queue.h	654;"	d
TAILQ_PREV	queue.h	656;"	d
TAILQ_REMOVE	queue.h	659;"	d
TAILQ_SWAP	queue.h	677;"	d
TEST	test/Makefile	/^TEST=test$/;"	m
TEST	test/ctest.h	921;"	d
TEST	test/iniconf_test.c	/^TEST(iniconf, iniconf)$/;"	f
TEST	test/log_test.c	/^TEST(log, log)$/;"	f
TEST_MY_OBJ	test/Makefile	/^TEST_MY_OBJ=main.o$/;"	m
TEST_OBJ	test/Makefile	/^TEST_OBJ=..\/log.o log_test.o ..\/dict.o ..\/util.o ..\/iniconf.o iniconf_test.o \\$/;"	m
TIME_FORMATE_1	util.h	17;"	d
TIME_FORMATE_2	util.h	18;"	d
TIME_FORMATE_3	util.h	19;"	d
TRACEBUF	queue.h	118;"	d
TRACEBUF	queue.h	141;"	d
TRACEBUF_INITIALIZER	queue.h	119;"	d
TRACEBUF_INITIALIZER	queue.h	142;"	d
TRASHIT	queue.h	120;"	d
TRASHIT	queue.h	143;"	d
ZERO_MEMORY	myqueue.c	11;"	d	file:
_SYS_QUEUE_H_	queue.h	34;"	d
__ABORT_IF_NO_MONEY	test/ctest.h	117;"	d
__ADLIST_H__	dlist.h	32;"	d
__CCALL	test/ctest.h	112;"	d
__CCALL	test/ctest.h	99;"	d
__CONSTRCT	test/ctest.h	104;"	d
__CONSTRCT	test/ctest.h	113;"	d
__CONTAINEROF	myqueue.h	14;"	d
__CTEST_H__	test/ctest.h	28;"	d
__CT_SLIST_EMPTY	test/ctest.h	58;"	d
__CT_SLIST_END	test/ctest.h	57;"	d
__CT_SLIST_ENTRY	test/ctest.h	48;"	d
__CT_SLIST_ENTRY	test/ctest.h	93;"	d
__CT_SLIST_FIRST	test/ctest.h	56;"	d
__CT_SLIST_FOREACH	test/ctest.h	62;"	d
__CT_SLIST_HEAD	test/ctest.h	40;"	d
__CT_SLIST_HEAD_INITIALIZER	test/ctest.h	45;"	d
__CT_SLIST_INIT	test/ctest.h	70;"	d
__CT_SLIST_INSERT_AFTER	test/ctest.h	74;"	d
__CT_SLIST_INSERT_HEAD	test/ctest.h	79;"	d
__CT_SLIST_NEXT	test/ctest.h	60;"	d
__CT_SLIST_REMOVE_AFTER	test/ctest.h	88;"	d
__CT_SLIST_REMOVE_HEAD	test/ctest.h	84;"	d
__DICT_H	dict.h	37;"	d
__FOMATTER	test/ctest.h	949;"	d
__INICONF_H__	iniconf.h	9;"	d
__LOG_H__	log.h	9;"	d
__MYQUEUE_H__	myqueue.h	9;"	d
__MYSCH_H__	mysch.h	9;"	d
__MYSCH_STRUCT_H__	mysch_struct.h	9;"	d
__OFFSET	myqueue.h	11;"	d
__SDS_H	sds.h	32;"	d
__UTIL_H__	util.h	9;"	d
__ct_add_failed_test	test/ctest.h	/^void __ct_add_failed_test(const char* tn)$/;"	f
__ct_apply_filter	test/ctest.h	/^int __ct_apply_filter()$/;"	f
__ct_get_fixture	test/ctest.h	/^__test_fixture_t* __ct_get_fixture(const char* tf, int type) \/\/ 0 run, 1 failed$/;"	f
__ct_get_fixture_count	test/ctest.h	/^int __ct_get_fixture_count()$/;"	f
__ct_get_hex	test/ctest.h	230;"	d
__ct_get_test_count	test/ctest.h	/^int __ct_get_test_count()$/;"	f
__ct_help	test/ctest.h	/^void __ct_help()$/;"	f
__ct_hex_dump	test/ctest.h	/^char* __ct_hex_dump(void* src, int size, char* dst)$/;"	f
__ct_init_test	test/ctest.h	/^void __ct_init_test(int argc, char** argv)$/;"	f
__ct_is_test_failed	test/ctest.h	/^int __ct_is_test_failed(const char* tf, const char* tc)$/;"	f
__ct_list_tests	test/ctest.h	/^void __ct_list_tests()$/;"	f
__ct_match	test/ctest.h	/^int __ct_match(const char * text, const char * pattern)$/;"	f
__ct_match_filter	test/ctest.h	/^int __ct_match_filter(const char* name)$/;"	f
__ct_register_fixture	test/ctest.h	/^void __ct_register_fixture(__test_fixture_t* test)$/;"	f
__ct_register_test	test/ctest.h	/^void __ct_register_test(__test_case_t* test)$/;"	f
__ct_run	test/ctest.h	/^int __ct_run()$/;"	f
__ct_run_test	test/ctest.h	/^int __ct_run_test()$/;"	f
__ct_set_env	test/ctest.h	/^void __ct_set_env(void (*up)(), void (*down)())$/;"	f
__ct_test	test/ctest.h	/^__test_t* __ct_test()$/;"	f
__discard_func_warning	test/ctest.h	131;"	d
__func__	test/ctest.h	100;"	d
__gen_symbol	test/ctest.h	128;"	d
__gen_symbol_2	test/ctest.h	125;"	d
__test	test/ctest.h	/^struct __test$/;"	s
__test_case	test/ctest.h	/^struct __test_case$/;"	s
__test_case_entry	test/ctest.h	/^struct __test_case_entry$/;"	s
__test_case_entry_t	test/ctest.h	/^typedef struct __test_case_entry __test_case_entry_t;$/;"	t	typeref:struct:__test_case_entry
__test_case_t	test/ctest.h	/^typedef struct __test_case __test_case_t;$/;"	t	typeref:struct:__test_case
__test_caseq_t	test/ctest.h	/^        __test_caseq_t;$/;"	t
__test_filter	test/ctest.h	/^struct __test_filter$/;"	s
__test_filter_entry	test/ctest.h	/^struct __test_filter_entry$/;"	s
__test_filter_entry_t	test/ctest.h	/^typedef struct __test_filter_entry __test_filter_entry_t;$/;"	t	typeref:struct:__test_filter_entry
__test_filter_t	test/ctest.h	/^typedef struct __test_filter __test_filter_t;$/;"	t	typeref:struct:__test_filter
__test_filterq_t	test/ctest.h	/^        __test_filterq_t;$/;"	t
__test_fixture	test/ctest.h	/^struct __test_fixture$/;"	s
__test_fixture_entry	test/ctest.h	/^struct __test_fixture_entry$/;"	s
__test_fixture_entry_t	test/ctest.h	/^typedef struct __test_fixture_entry __test_fixture_entry_t;$/;"	t	typeref:struct:__test_fixture_entry
__test_fixture_t	test/ctest.h	/^typedef struct __test_fixture __test_fixture_t;$/;"	t	typeref:struct:__test_fixture
__test_fixtureq_t	test/ctest.h	/^        __test_fixtureq_t;$/;"	t
__test_t	test/ctest.h	/^typedef struct __test __test_t;$/;"	t	typeref:struct:__test
_anet_tcp_server	anet.c	/^static int _anet_tcp_server(char *err, int port, char *bindaddr, int af, int backlog)$/;"	f	file:
_context	log.c	/^static struct log_context    _context = {0};$/;"	v	typeref:struct:log_context	file:
_ctx_mutex	log.c	/^static pthread_mutex_t     _ctx_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
_dict_clear	dict.c	/^int _dict_clear(dict *d, dictht *ht)$/;"	f
_dict_expand_if_needed	dict.c	/^static int _dict_expand_if_needed(dict *d)$/;"	f	file:
_dict_init	dict.c	/^int _dict_init(dict *d, void *priv_data_ptr)$/;"	f
_dict_key_index	dict.c	/^static int _dict_key_index(dict *d, const void *key, int keylen)$/;"	f	file:
_dict_next_power	dict.c	/^static unsigned long _dict_next_power(unsigned long size)$/;"	f	file:
_dict_print_stats_ht	dict.c	/^static void _dict_print_stats_ht(dictht *ht)$/;"	f	file:
_dict_rehash_step	dict.c	/^static void _dict_rehash_step(dict *d)$/;"	f	file:
_dict_reset	dict.c	/^static void _dict_reset(dictht *ht)$/;"	f	file:
_file_log_ctx	log.c	/^static struct file_log  _file_log_ctx = { {0} };$/;"	v	typeref:struct:file_log	file:
anetCreateSocket	anet.c	/^static int anetCreateSocket(char *err, int domain) {$/;"	f	file:
anetGenericAccept	anet.c	/^static int anetGenericAccept(char *err, int s, struct sockaddr *sa, socklen_t *len) {$/;"	f	file:
anetListen	anet.c	/^static int anetListen(char *err, int s, struct sockaddr *sa, socklen_t len, int backlog) {$/;"	f	file:
anetSetSendBuffer	anet.c	/^int anetSetSendBuffer(char *err, int fd, int buffsize)$/;"	f
anetSetTcpNoDelay	anet.c	/^static int anetSetTcpNoDelay(char *err, int fd, int val)$/;"	f	file:
anetUnixNonBlockConnect	anet.c	/^int anetUnixNonBlockConnect(char *err, char *path)$/;"	f
anetV6Only	anet.c	/^static int anetV6Only(char *err, int s) {$/;"	f	file:
anet_disable_tcp_nodelay	anet.c	/^int anet_disable_tcp_nodelay(char *err, int fd)$/;"	f
anet_enable_tcp_nodelay	anet.c	/^int anet_enable_tcp_nodelay(char *err, int fd)$/;"	f
anet_generic_resolve	anet.c	/^int anet_generic_resolve(char *err, char *host, char *ipbuf, size_t ipbuf_len,$/;"	f
anet_keepalive	anet.c	/^int anet_keepalive(char *err, int fd, int interval)$/;"	f
anet_noblock	anet.c	/^int anet_noblock(char *err, int fd)$/;"	f
anet_peer_tostring	anet.c	/^int anet_peer_tostring(int fd, char *ip, size_t ip_len, int *port) {$/;"	f
anet_read	anet.c	/^int anet_read(int fd, char *buf, int count)$/;"	f
anet_resolve	anet.c	/^int anet_resolve(char *err, char *host, char *ipbuf, size_t ipbuf_len) {$/;"	f
anet_resolve_ip	anet.c	/^int anet_resolve_ip(char *err, char *host, char *ipbuf, size_t ipbuf_len) {$/;"	f
anet_set_error	anet.c	/^static void anet_set_error(char *err, const char *fmt, ...)$/;"	f	file:
anet_set_reuse_addr	anet.c	/^static int anet_set_reuse_addr(char *err, int fd) {$/;"	f	file:
anet_sock_name	anet.c	/^int anet_sock_name(int fd, char *ip, size_t ip_len, int *port) {$/;"	f
anet_tcp6_server	anet.c	/^int anet_tcp6_server(char *err, int port, char *bindaddr, int backlog)$/;"	f
anet_tcp_accept	anet.c	/^int anet_tcp_accept(char *err, int s, char *ip, size_t ip_len, int *port) {$/;"	f
anet_tcp_connect	anet.c	/^int anet_tcp_connect(char *err, char *addr, int port)$/;"	f
anet_tcp_generic_connect	anet.c	/^static int anet_tcp_generic_connect(char *err, char *addr, int port, int flags)$/;"	f	file:
anet_tcp_keepalive	anet.c	/^int anet_tcp_keepalive(char *err, int fd)$/;"	f
anet_tcp_noblock_connect	anet.c	/^int anet_tcp_noblock_connect(char *err, char *addr, int port)$/;"	f
anet_tcp_server	anet.c	/^int anet_tcp_server(char *err, int port, char *bindaddr, int backlog)$/;"	f
anet_unix_accept	anet.c	/^int anet_unix_accept(char *err, int s) {$/;"	f
anet_unix_connect	anet.c	/^int anet_unix_connect(char *err, char *path)$/;"	f
anet_unix_generic_connect	anet.c	/^int anet_unix_generic_connect(char *err, char *path, int flags)$/;"	f
anet_unix_server	anet.c	/^int anet_unix_server(char *err, char *path, mode_t perm, int backlog)$/;"	f
anet_write	anet.c	/^int anet_write(int fd, char *buf, int count)$/;"	f
argc	mysch_struct.h	/^    int argc;$/;"	m	struct:prog_s
args	log.c	/^    void* args;$/;"	m	struct:call_back	file:
argv	mysch_struct.h	/^    char argv[16][128];$/;"	m	struct:prog_s
buf	log.c	/^    char* buf;$/;"	m	struct:file_log	file:
buf	sds.h	/^    char buf[];$/;"	m	struct:sdshdr
buf_size	log.c	/^    int   buf_size;$/;"	m	struct:file_log	file:
build_condition	mysch.c	/^int build_condition(prog_t* prog, const char* cond)$/;"	f
call_back	log.c	/^struct call_back$/;"	s	file:
caseq	test/ctest.h	/^    __test_caseq_t* caseq;$/;"	m	struct:__test_fixture
cb	log.c	/^    struct call_back* cb;$/;"	m	struct:log_context	typeref:struct:log_context::call_back	file:
clean_proccess	mysch.c	/^void clean_proccess(int killflag)$/;"	f
cmd	mysch_struct.h	/^    char cmd[256];$/;"	m	struct:prog_s
cond	mysch_struct.h	/^    cond_group_t* cond;$/;"	m	struct:prog_s
cond_group_t	mysch_struct.h	/^typedef struct list   cond_group_t;$/;"	t	typeref:struct:list
cond_s	mysch_struct.h	/^struct cond_s$/;"	s
cond_t	mysch_struct.h	/^typedef struct cond_s cond_t;$/;"	t	typeref:struct:cond_s
conf	mysch_struct.h	/^    char conf[256];$/;"	m	struct:sch_info_s
d	dict.h	/^    dict *d;$/;"	m	struct:dict_iterator
data	myqueue.h	/^    void* data; \/* data *\/$/;"	m	struct:list_node_s
data	myqueue.h	/^    void* data; \/* data *\/$/;"	m	struct:slist_node_s
data	myqueue.h	/^    void* data; \/* data *\/$/;"	m	struct:stailq_node_s
data	myqueue.h	/^    void* data; \/* data *\/$/;"	m	struct:tailq_node_s
day	mysch_struct.h	/^    char day[7 + 1];$/;"	m	struct:cond_s
dict	dict.h	/^typedef struct dict {$/;"	s
dict	dict.h	/^} dict;$/;"	t	typeref:struct:dict
dict_add	dict.c	/^int dict_add(dict *d, void *key, int keylen, void *val, int vallen)$/;"	f
dict_can_resize	dict.c	/^static int dict_can_resize = 1;$/;"	v	file:
dict_create	dict.c	/^dict *dict_create(void *priv_data_ptr)$/;"	f
dict_delete	dict.c	/^int dict_delete(dict *ht, const void *key, int keylen)$/;"	f
dict_delete_no_free	dict.c	/^int dict_delete_no_free(dict *ht, const void *key, int keylen)$/;"	f
dict_disable_resize	dict.c	/^void dict_disable_resize(void)$/;"	f
dict_empty	dict.c	/^void dict_empty(dict *d)$/;"	f
dict_enable_resize	dict.c	/^void dict_enable_resize(void)$/;"	f
dict_entry	dict.h	/^typedef struct dict_entry {$/;"	s
dict_entry	dict.h	/^} dict_entry;$/;"	t	typeref:struct:dict_entry
dict_expand	dict.c	/^int dict_expand(dict *d, unsigned long size)$/;"	f
dict_fetch_value	dict.c	/^void *dict_fetch_value(dict *d, const void *key, int keylen)$/;"	f
dict_find	dict.c	/^dict_entry *dict_find(dict *d, const void *key, int keylen)$/;"	f
dict_force_resize_ratio	dict.c	/^static unsigned int dict_force_resize_ratio = 5;$/;"	v	file:
dict_gen_case_hash_function	dict.c	/^unsigned int dict_gen_case_hash_function(const unsigned char *buf, int len)$/;"	f
dict_gen_hash_function	dict.c	/^unsigned int dict_gen_hash_function(const unsigned char *buf, int len)$/;"	f
dict_generic_delete	dict.c	/^static int dict_generic_delete(dict *d, const void *key, int keylen, int nofree)$/;"	f	file:
dict_get_entry_key	dict.h	90;"	d
dict_get_entry_val	dict.h	91;"	d
dict_get_iterator	dict.c	/^dict_iterator *dict_get_iterator(dict *d)$/;"	f
dict_get_randomKey	dict.c	/^dict_entry *dict_get_randomKey(dict *d)$/;"	f
dict_get_safe_iterator	dict.c	/^dict_iterator *dict_get_safe_iterator(dict *d)$/;"	f
dict_identity_hash_function	dict.c	/^unsigned int dict_identity_hash_function(unsigned int key)$/;"	f
dict_int_hash_function	dict.c	/^unsigned int dict_int_hash_function(unsigned int key)$/;"	f
dict_is_rehashing	dict.h	94;"	d
dict_iterator	dict.h	/^typedef struct dict_iterator {$/;"	s
dict_iterator	dict.h	/^} dict_iterator;$/;"	t	typeref:struct:dict_iterator
dict_next	dict.c	/^dict_entry *dict_next(dict_iterator *iter)$/;"	f
dict_print_stats	dict.c	/^void dict_print_stats(dict *d)$/;"	f
dict_rehash	dict.c	/^int dict_rehash(dict *d, int n)$/;"	f
dict_rehash_milliseconds	dict.c	/^int dict_rehash_milliseconds(dict *d, int ms)$/;"	f
dict_release	dict.c	/^void dict_release(dict *d)$/;"	f
dict_release_iterator	dict.c	/^void dict_release_iterator(dict_iterator *iter)$/;"	f
dict_replace	dict.c	/^int dict_replace(dict *d, void *key, int keylen, void *val, int vallen)$/;"	f
dict_resize	dict.c	/^int dict_resize(dict *d)$/;"	f
dict_size	dict.h	93;"	d
dict_slots	dict.h	92;"	d
dictht	dict.h	/^typedef struct dictht {$/;"	s
dictht	dict.h	/^} dictht;$/;"	t	typeref:struct:dictht
direction	dlist.h	/^    int direction;$/;"	m	struct:list_iter
end	mysch_struct.h	/^    long end;$/;"	m	struct:cond_s
entry	dict.h	/^    dict_entry *entry, *next_entry;$/;"	m	struct:dict_iterator
entry	test/ctest.h	/^    __CT_SLIST_ENTRY(__test_case_entry) entry;$/;"	m	struct:__test_case_entry
entry	test/ctest.h	/^    __CT_SLIST_ENTRY(__test_filter_entry) entry;$/;"	m	struct:__test_filter_entry
entry	test/ctest.h	/^    __CT_SLIST_ENTRY(__test_fixture_entry) entry;$/;"	m	struct:__test_fixture_entry
f_size	test/ctest.h	/^    int f_size;$/;"	m	struct:__test
failed	test/ctest.h	/^    __test_fixtureq_t* failed;$/;"	m	struct:__test
file_count	log.c	/^    int   file_count;$/;"	m	struct:file_log	file:
file_log	log.c	/^struct file_log$/;"	s	file:
filter	test/ctest.h	/^    __test_filter_t* filter;$/;"	m	struct:__test_filter_entry
filter	test/ctest.h	/^    __test_filterq_t* filter;$/;"	m	struct:__test
filter	test/ctest.h	/^    char filter[256];$/;"	m	struct:__test_filter
fixture	test/ctest.h	/^    __test_fixture_t* fixture;$/;"	m	struct:__test_case
flag	mysch_struct.h	/^    int flag;$/;"	m	struct:prog_s
flag	test/ctest.h	/^    int flag:1; \/\/ 0 positive, 1 negative$/;"	m	struct:__test_filter
flush_cb_fun	log.c	/^    log_callback_uninit_t flush_cb_fun;$/;"	m	struct:call_back	file:
fn_free	myqueue.h	/^    fn_free_t fn_free; \/* free data *\/$/;"	m	struct:list_node_s
fn_free	myqueue.h	/^    fn_free_t fn_free; \/* free data *\/$/;"	m	struct:stailq_node_s
fn_free	myqueue.h	/^    fn_free_t fn_free; \/* free data *\/$/;"	m	struct:tailq_node_s
fn_free	myqueue.h	/^    fn_free_t fn_free; \/* free data fun*\/$/;"	m	struct:slist_node_s
fn_free_t	myqueue.h	/^typedef void (*fn_free_t)(void*);$/;"	t
fp	log.c	/^    FILE* fp;$/;"	m	struct:file_log	file:
free	sds.h	/^    int free;$/;"	m	struct:sdshdr
g_chld	mysch.c	/^static int g_chld = 0;$/;"	v	file:
g_info	mysch.c	/^sch_info_t g_info = { 0 };$/;"	v
g_term	mysch.c	/^static int g_term = 0;$/;"	v	file:
g_usr1	mysch.c	/^static int g_usr1 = 0;$/;"	v	file:
g_usr2	mysch.c	/^static int g_usr2 = 0;$/;"	v	file:
get_1970_ms	util.c	/^time_t get_1970_ms()$/;"	f
get_1970_ms_0_am	util.c	/^time_t get_1970_ms_0_am()$/;"	f
get_1970_sec	util.c	/^time_t get_1970_sec()$/;"	f
get_1970_sec_0_am	util.c	/^time_t get_1970_sec_0_am()$/;"	f
get_1970_usec	util.c	/^time_t get_1970_usec()$/;"	f
get_1970_usec_0_am	util.c	/^time_t get_1970_usec_0_am()$/;"	f
get_utc_ms	util.c	/^time_t get_utc_ms()$/;"	f
get_utc_sec	util.c	/^time_t get_utc_sec()$/;"	f
get_utc_usec	util.c	/^time_t get_utc_usec()$/;"	f
handle_sigchild	mysch.c	/^void handle_sigchild()$/;"	f
handle_sigusr1	mysch.c	/^void handle_sigusr1()$/;"	f
head	dlist.h	/^    list_node *head;$/;"	m	struct:list
hex_digit_to_int	sds.c	/^int hex_digit_to_int(char c) {$/;"	f
ht	dict.h	/^    dictht ht[2];$/;"	m	struct:dict
index	dict.h	/^    int table, index, safe;$/;"	m	struct:dict_iterator
ini_conf_t	iniconf.h	/^typedef dict ini_conf_t;$/;"	t
ini_create	iniconf.c	/^ini_conf_t* ini_create()$/;"	f
ini_delete_sec	iniconf.c	/^int ini_delete_sec(ini_conf_t* ini, const char* key)$/;"	f
ini_delete_val	iniconf.c	/^int ini_delete_val(ini_sec_t* sec, const char* key)$/;"	f
ini_destroy	iniconf.c	/^int ini_destroy(ini_conf_t* ini)$/;"	f
ini_dump	iniconf.c	/^int ini_dump(ini_conf_t* ini, char* buf, size_t len)$/;"	f
ini_get_sec	iniconf.c	/^ini_sec_t* ini_get_sec(ini_conf_t* ini, const char* key)$/;"	f
ini_get_val	iniconf.c	/^const char* ini_get_val(ini_sec_t* sec, const char* key)$/;"	f
ini_insert_sec	iniconf.c	/^ini_sec_t* ini_insert_sec(ini_conf_t* ini, const char* key)$/;"	f
ini_insert_val	iniconf.c	/^int ini_insert_val(ini_sec_t* sec, const char* key, const char* val)$/;"	f
ini_kv_s	iniconf.c	/^struct ini_kv_s$/;"	s	file:
ini_kv_t	iniconf.c	/^typedef struct ini_kv_s ini_kv_t;$/;"	t	typeref:struct:ini_kv_s	file:
ini_load	iniconf.c	/^int ini_load(ini_conf_t* ini, const char* file)$/;"	f
ini_save	iniconf.c	/^int ini_save(ini_conf_t* ini, const char* file)$/;"	f
ini_save_sec	iniconf.c	/^static int ini_save_sec(ini_sec_t* sec, int fd)$/;"	f	file:
ini_save_sec_buf	iniconf.c	/^static int ini_save_sec_buf(ini_sec_t* sec, char* buf, size_t len)$/;"	f	file:
ini_sec_t	iniconf.h	/^typedef dict ini_sec_t;$/;"	t
init_cb_fun	log.c	/^    log_callback_int_t init_cb_fun;$/;"	m	struct:call_back	file:
init_context	mysch.c	/^int init_context(sch_info_t* info)$/;"	f
is_hex_digit	sds.c	/^int is_hex_digit(char c) {$/;"	f
is_prog_runas_root	util.c	/^int is_prog_runas_root()$/;"	f
is_prog_running	util.c	/^int is_prog_running(const char* name)$/;"	f
iterators	dict.h	/^    int iterators;              \/* number of iterators currently running *\/$/;"	m	struct:dict
judge_condition	mysch.c	/^int judge_condition(prog_t* prog)$/;"	f
k	iniconf.c	/^    char k[INI_MAX_KEY_LEN];$/;"	m	struct:ini_kv_s	file:
key	dict.h	/^    void *key;$/;"	m	struct:dict_entry
keylen	dict.h	/^    unsigned int keylen;$/;"	m	struct:dict_entry
kill_flag	mysch_struct.h	/^    int kill_flag;$/;"	m	struct:sch_info_s
lastfile	queue.h	/^	const char	*lastfile;$/;"	m	struct:qm_trace
lastline	queue.h	/^	unsigned long	 lastline;$/;"	m	struct:qm_trace
le_next	myqueue.h	/^    struct list_node_s *le_next;   \/* next element *\/$/;"	m	struct:list_node_s	typeref:struct:list_node_s::list_node_s
le_prev	myqueue.h	/^    struct list_node_s **le_prev;  \/* address of previous next element *\/$/;"	m	struct:list_node_s	typeref:struct:list_node_s::list_node_s
len	dlist.h	/^    unsigned long len;$/;"	m	struct:list
len	sds.h	/^    int len;$/;"	m	struct:sdshdr
level	log.c	/^    int level;$/;"	m	struct:call_back	file:
lh_first	myqueue.h	/^    struct list_node_s *lh_first;\/* first element *\/$/;"	m	struct:list_s	typeref:struct:list_s::list_node_s
list	dlist.h	/^typedef struct list {$/;"	s
list	dlist.h	/^} list;$/;"	t	typeref:struct:list
list_add_node_head	dlist.c	/^list *list_add_node_head(list *list, void *value)$/;"	f
list_add_node_tail	dlist.c	/^list *list_add_node_tail(list *list, void *value)$/;"	f
list_create	dlist.c	/^list *list_create(void)$/;"	f
list_create	myqueue.c	/^list_t* list_create()$/;"	f
list_del_node	dlist.c	/^void list_del_node(list *list, list_node *node, int nofree)$/;"	f
list_destroy	myqueue.c	/^void list_destroy(list_t* list)$/;"	f
list_empty	myqueue.h	224;"	d
list_first	dlist.h	58;"	d
list_first	myqueue.h	225;"	d
list_get_iterator	dlist.c	/^list_iter *list_get_iterator(list *list, int direction)$/;"	f
list_index	dlist.c	/^list_node *list_index(list *list, long index) {$/;"	f
list_init	myqueue.h	223;"	d
list_insert_after	myqueue.h	231;"	d
list_insert_before	myqueue.h	239;"	d
list_insert_head	myqueue.h	246;"	d
list_insert_node	dlist.c	/^list *list_insert_node(list *list, list_node *old_node, void *value, int after) {$/;"	f
list_iter	dlist.h	/^typedef struct list_iter {$/;"	s
list_iter	dlist.h	/^} list_iter;$/;"	t	typeref:struct:list_iter
list_last	dlist.h	59;"	d
list_length	dlist.h	57;"	d
list_next	dlist.c	/^list_node *list_next(list_iter *iter)$/;"	f
list_next	myqueue.h	226;"	d
list_next_node	dlist.h	61;"	d
list_node	dlist.h	/^typedef struct list_node {$/;"	s
list_node	dlist.h	/^} list_node;$/;"	t	typeref:struct:list_node
list_node_create	myqueue.c	/^list_node_t* list_node_create(void* data, fn_free_t fn_free)$/;"	f
list_node_data	myqueue.h	220;"	d
list_node_destroy	myqueue.c	/^void list_node_destroy(list_node_t* node)$/;"	f
list_node_s	myqueue.h	/^struct list_node_s$/;"	s
list_node_t	myqueue.h	/^typedef struct list_node_s list_node_t;$/;"	t	typeref:struct:list_node_s
list_node_value	dlist.h	62;"	d
list_prev	myqueue.h	227;"	d
list_prev_node	dlist.h	60;"	d
list_release	dlist.c	/^void list_release(list *list, int nofree)$/;"	f
list_release_iterator	dlist.c	/^void list_release_iterator(list_iter *iter) {$/;"	f
list_remove	myqueue.h	253;"	d
list_rewind	dlist.c	/^void list_rewind(list *list, list_iter *li) {$/;"	f
list_rewind_tail	dlist.c	/^void list_rewind_tail(list *list, list_iter *li) {$/;"	f
list_rotate	dlist.c	/^void list_rotate(list *list) {$/;"	f
list_s	myqueue.h	/^struct list_s$/;"	s
list_search_key	dlist.c	/^list_node *list_search_key(list *list, void *key, int len)$/;"	f
list_set_node_data	myqueue.h	221;"	d
list_swap	myqueue.h	260;"	d
list_t	myqueue.h	/^typedef struct list_s list_t;$/;"	t	typeref:struct:list_s
load_conf	mysch.c	/^int load_conf(sch_info_t* info, int flag)$/;"	f
log_callback_flush_t	log.h	/^typedef int (*log_callback_flush_t)(void* args);$/;"	t
log_callback_int_t	log.h	/^typedef int (*log_callback_int_t)(void* args);$/;"	t
log_callback_log_t	log.h	/^typedef int (*log_callback_log_t)(const char* log, int len, void* args);$/;"	t
log_callback_uninit_t	log.h	/^typedef int (*log_callback_uninit_t)(void* args);$/;"	t
log_cb_fun	log.c	/^    log_callback_log_t log_cb_fun;$/;"	m	struct:call_back	file:
log_clearup	log.c	/^void log_clearup()$/;"	f
log_console_callback_log	log.c	/^int log_console_callback_log(const char* log, int len, void* args)$/;"	f
log_context	log.c	/^struct log_context$/;"	s	file:
log_debug	log.c	/^void log_debug(const char* format, ...)$/;"	f
log_error	log.c	/^void log_error(const char* format, ...)$/;"	f
log_fatal	log.c	/^void log_fatal(const char* format, ...)$/;"	f
log_file_flush_callback_fun	log.c	/^int log_file_flush_callback_fun(void* args)$/;"	f
log_file_init_callback_fun	log.c	/^int log_file_init_callback_fun(void* args)$/;"	f
log_file_log_callback_fun	log.c	/^int log_file_log_callback_fun(const char* log, int len, void* args)$/;"	f
log_file_switch	log.c	/^static int log_file_switch(void* args)$/;"	f	file:
log_file_uninit_callback_fun	log.c	/^int log_file_uninit_callback_fun(void* args)$/;"	f
log_finish	log.c	/^int log_finish()$/;"	f
log_flush	log.c	/^void log_flush()$/;"	f
log_get_header	log.c	/^static int log_get_header(int lvl, char* buf, int size)$/;"	f	file:
log_get_level	log.c	/^int log_get_level(const char* lvl)$/;"	f
log_info	log.c	/^void log_info (const char* format, ...)$/;"	f
log_initialize_console	log.c	/^int log_initialize_console(int con_lvl)$/;"	f
log_initialize_default	log.c	/^int log_initialize_default(int con_lvl, int file_lvl,$/;"	f
log_initialize_file	log.c	/^int log_initialize_file(int file_lvl,$/;"	f
log_message	log.c	/^static void log_message(int lvl, const char* format, va_list ap)$/;"	f	file:
log_reg_callback	log.c	/^int log_reg_callback(int lvl,$/;"	f
log_start	log.c	/^int log_start()$/;"	f
log_warn	log.c	/^void log_warn (const char* format, ...)$/;"	f
main	mysch.c	/^int main(int argc, char* argv[])$/;"	f
main	sds.c	/^int main(void) {$/;"	f
main	test/main.c	/^int main(int argc, char **argv)$/;"	f
make_daemon	util.c	/^int make_daemon()$/;"	f
match	util.c	/^int match(const char* text, const char* pattern)$/;"	f
mode	test/ctest.h	/^    int mode; \/\/ run 0 help 1 list_tests 2 filter 3 unknown 4$/;"	m	struct:__test
mytask	mysch.c	/^int mytask()$/;"	f
name	log.c	/^    char  name[LOG_DEFAULT_MAX_PATH];$/;"	m	struct:file_log	file:
name	test/ctest.h	/^    char name[256];$/;"	m	struct:__test_case
name	test/ctest.h	/^    char name[256];$/;"	m	struct:__test_fixture
next	dict.h	/^    struct dict_entry *next;$/;"	m	struct:dict_entry	typeref:struct:dict_entry::dict_entry
next	dlist.h	/^    list_node *next;$/;"	m	struct:list_iter
next	dlist.h	/^    struct list_node *next;$/;"	m	struct:list_node	typeref:struct:list_node::list_node
next	log.c	/^    struct call_back* next;$/;"	m	struct:call_back	typeref:struct:call_back::call_back	file:
next_entry	dict.h	/^    dict_entry *entry, *next_entry;$/;"	m	struct:dict_iterator
path	log.c	/^    char  path[LOG_DEFAULT_MAX_PATH];$/;"	m	struct:file_log	file:
pid	mysch_struct.h	/^    pid_t pid;$/;"	m	struct:prog_s
pid_file	mysch_struct.h	/^    char pid_file[256];$/;"	m	struct:prog_s
pid_file	mysch_struct.h	/^    char pid_file[256];$/;"	m	struct:sch_info_s
prefix	log.c	/^    char  prefix[LOG_DEFAULT_MAX_PATH];$/;"	m	struct:file_log	file:
prev	dlist.h	/^    struct list_node *prev;$/;"	m	struct:list_node	typeref:struct:list_node::list_node
prevfile	queue.h	/^	const char	*prevfile;$/;"	m	struct:qm_trace
prevline	queue.h	/^	unsigned long	 prevline;$/;"	m	struct:qm_trace
privdata	dict.h	/^    void *privdata;$/;"	m	struct:dict
prog_group_t	mysch_struct.h	/^typedef struct list   prog_group_t;$/;"	t	typeref:struct:list
prog_s	mysch_struct.h	/^struct prog_s$/;"	s
prog_t	mysch_struct.h	/^typedef struct prog_s prog_t;$/;"	t	typeref:struct:prog_s
prog_wait_t	mysch_struct.h	/^typedef struct dict   prog_wait_t;$/;"	t	typeref:struct:dict
progq	mysch_struct.h	/^    prog_group_t* progq;$/;"	m	struct:sch_info_s
qm_trace	queue.h	/^struct qm_trace {$/;"	s
r_size	test/ctest.h	/^    int r_size;$/;"	m	struct:__test
read_line	iniconf.c	/^static int read_line(int fd, char* buf, int size)$/;"	f	file:
read_pid_file	util.c	/^int read_pid_file(pid_t* pid, const char* file)$/;"	f
reg_sign	mysch.c	/^int reg_sign()$/;"	f
rehashidx	dict.h	/^    int rehashidx;              \/* rehashing not in progress if rehashidx == -1 *\/$/;"	m	struct:dict
run	test/ctest.h	/^    __test_fixtureq_t* run;$/;"	m	struct:__test
run_prog	mysch.c	/^int run_prog(prog_t* prog)$/;"	f
run_user	mysch_struct.h	/^    char run_user[64];$/;"	m	struct:sch_info_s
runas	util.c	/^int runas(const char* user)$/;"	f
safe	dict.h	/^    int table, index, safe;$/;"	m	struct:dict_iterator
sch_info_s	mysch_struct.h	/^struct sch_info_s$/;"	s
sch_info_t	mysch_struct.h	/^typedef struct sch_info_s sch_info_t;$/;"	t	typeref:struct:sch_info_s
sds	sds.h	/^typedef char *sds;$/;"	t
sdsAllocSize	sds.c	/^size_t sdsAllocSize(sds s) {$/;"	f
sdsIncrLen	sds.c	/^void sdsIncrLen(sds s, int incr) {$/;"	f
sdsMakeRoomFor	sds.c	/^sds sdsMakeRoomFor(sds s, size_t addlen) {$/;"	f
sdsRemoveFreeSpace	sds.c	/^sds sdsRemoveFreeSpace(sds s) {$/;"	f
sdsavail	sds.h	/^static inline size_t sdsavail(const sds s) {$/;"	f
sdscat	sds.c	/^sds sdscat(sds s, const char *t) {$/;"	f
sdscatlen	sds.c	/^sds sdscatlen(sds s, const void *t, size_t len) {$/;"	f
sdscatprintf	sds.c	/^sds sdscatprintf(sds s, const char *fmt, ...) {$/;"	f
sdscatrepr	sds.c	/^sds sdscatrepr(sds s, const char *p, size_t len) {$/;"	f
sdscatsds	sds.c	/^sds sdscatsds(sds s, const sds t) {$/;"	f
sdscatvprintf	sds.c	/^sds sdscatvprintf(sds s, const char *fmt, va_list ap) {$/;"	f
sdsclear	sds.c	/^void sdsclear(sds s) {$/;"	f
sdscmp	sds.c	/^int sdscmp(const sds s1, const sds s2) {$/;"	f
sdscpy	sds.c	/^sds sdscpy(sds s, const char *t) {$/;"	f
sdscpylen	sds.c	/^sds sdscpylen(sds s, const char *t, size_t len) {$/;"	f
sdsdup	sds.c	/^sds sdsdup(const sds s) {$/;"	f
sdsempty	sds.c	/^sds sdsempty(void) {$/;"	f
sdsfree	sds.c	/^void sdsfree(sds s) {$/;"	f
sdsfreesplitres	sds.c	/^void sdsfreesplitres(sds *tokens, int count) {$/;"	f
sdsfromlonglong	sds.c	/^sds sdsfromlonglong(long long value) {$/;"	f
sdsgrowzero	sds.c	/^sds sdsgrowzero(sds s, size_t len) {$/;"	f
sdshdr	sds.h	/^struct sdshdr {$/;"	s
sdsjoin	sds.c	/^sds sdsjoin(char **argv, int argc, char *sep, size_t seplen) {$/;"	f
sdsjoinsds	sds.c	/^sds sdsjoinsds(sds *argv, int argc, const char *sep, size_t seplen) {$/;"	f
sdslen	sds.h	/^static inline size_t sdslen(const sds s) {$/;"	f
sdsmapchars	sds.c	/^sds sdsmapchars(sds s, const char *from, const char *to, size_t setlen) {$/;"	f
sdsnew	sds.c	/^sds sdsnew(const char *init) {$/;"	f
sdsnewlen	sds.c	/^sds sdsnewlen(const void *init, size_t initlen) {$/;"	f
sdsrange	sds.c	/^void sdsrange(sds s, int start, int end) {$/;"	f
sdssplitargs	sds.c	/^sds *sdssplitargs(const char *line, int *argc) {$/;"	f
sdssplitlen	sds.c	/^sds *sdssplitlen(const char *s, int len, const char *sep, int seplen, int *count) {$/;"	f
sdstolower	sds.c	/^void sdstolower(sds s) {$/;"	f
sdstoupper	sds.c	/^void sdstoupper(sds s) {$/;"	f
sdstrim	sds.c	/^void sdstrim(sds s, const char *cset) {$/;"	f
sdsupdatelen	sds.c	/^void sdsupdatelen(sds s) {$/;"	f
sec_1970_to_date	util.c	/^int sec_1970_to_date(time_t sec, const char* fmt, char* time, int len)$/;"	f
sec_1970_to_datetime	util.c	/^int sec_1970_to_datetime(time_t sec, const char* fmt, char* datetime, int len)$/;"	f
sec_1970_to_numeric	util.c	/^int sec_1970_to_numeric(time_t s,$/;"	f
sec_1970_to_time	util.c	/^int sec_1970_to_time(time_t sec, const char* fmt, char* time, int len)$/;"	f
set_signal	util.c	/^sigfunc* set_signal(int signo, sigfunc* func, int interupt)$/;"	f
setup	test/ctest.h	/^    void (*setup)();$/;"	m	struct:__test_fixture
setup_env	test/ctest.h	/^    void (*setup_env)();$/;"	m	struct:__test
setup_testcase	test/ctest.h	/^    void (*setup_testcase)();$/;"	m	struct:__test_fixture
sigchild	mysch.c	/^static void sigchild(int signo)$/;"	f	file:
sigfunc	util.h	/^typedef void sigfunc(int);$/;"	t
sigterm	mysch.c	/^static void sigterm(int signo)$/;"	f	file:
sigusr1	mysch.c	/^static void sigusr1(int signo)$/;"	f	file:
sigusr2	mysch.c	/^static void sigusr2(int signo)$/;"	f	file:
size	dict.h	/^    unsigned long size;$/;"	m	struct:dictht
size	test/ctest.h	/^    int size;$/;"	m	struct:__test_fixture
sizemask	dict.h	/^    unsigned long sizemask;$/;"	m	struct:dictht
sle_next	myqueue.h	/^    struct slist_node_s* sle_next; \/* next element *\/$/;"	m	struct:slist_node_s	typeref:struct:slist_node_s::slist_node_s
sleep_time	mysch_struct.h	/^    int sleep_time;$/;"	m	struct:sch_info_s
slh_first	myqueue.h	/^    struct slist_node_s* slh_first; \/* first element *\/$/;"	m	struct:slist_s	typeref:struct:slist_s::slist_node_s
slist_create	myqueue.c	/^slist_t* slist_create()$/;"	f
slist_destroy	myqueue.c	/^void slist_destroy(slist_t* list)$/;"	f
slist_empty	myqueue.h	50;"	d
slist_first	myqueue.h	51;"	d
slist_init	myqueue.h	49;"	d
slist_insert_after	myqueue.h	54;"	d
slist_insert_head	myqueue.h	59;"	d
slist_next	myqueue.h	52;"	d
slist_node_create	myqueue.c	/^slist_node_t* slist_node_create(void* data, fn_free_t fn_free)$/;"	f
slist_node_data	myqueue.h	46;"	d
slist_node_destroy	myqueue.c	/^void slist_node_destroy(slist_node_t* node)$/;"	f
slist_node_s	myqueue.h	/^struct slist_node_s$/;"	s
slist_node_t	myqueue.h	/^typedef struct slist_node_s slist_node_t;$/;"	t	typeref:struct:slist_node_s
slist_remove	myqueue.h	74;"	d
slist_remove_after	myqueue.h	68;"	d
slist_remove_head	myqueue.h	64;"	d
slist_s	myqueue.h	/^struct slist_s$/;"	s
slist_set_node_data	myqueue.h	47;"	d
slist_swap	myqueue.h	86;"	d
slist_t	myqueue.h	/^typedef struct slist_s slist_t;$/;"	t	typeref:struct:slist_s
snprintf	test/ctest.h	101;"	d
split	util.c	/^int split(const char* text, char needle, char** dest, int size, int num)$/;"	f
stailq_create	myqueue.c	/^stailq_t* stailq_create()$/;"	f
stailq_destroy	myqueue.c	/^void stailq_destroy(stailq_t* stailq)$/;"	f
stailq_empty	myqueue.h	128;"	d
stailq_first	myqueue.h	129;"	d
stailq_init	myqueue.h	124;"	d
stailq_insert_after	myqueue.h	135;"	d
stailq_insert_head	myqueue.h	141;"	d
stailq_insert_tail	myqueue.h	147;"	d
stailq_last	myqueue.h	131;"	d
stailq_next	myqueue.h	130;"	d
stailq_node_create	myqueue.c	/^stailq_node_t* stailq_node_create(void* data, fn_free_t fn_free)$/;"	f
stailq_node_data	myqueue.h	121;"	d
stailq_node_destroy	myqueue.c	/^void stailq_node_destroy(stailq_node_t* node)$/;"	f
stailq_node_s	myqueue.h	/^struct stailq_node_s$/;"	s
stailq_node_t	myqueue.h	/^typedef struct stailq_node_s stailq_node_t;$/;"	t	typeref:struct:stailq_node_s
stailq_remove	myqueue.h	153;"	d
stailq_remove_after	myqueue.h	165;"	d
stailq_remove_head	myqueue.h	171;"	d
stailq_s	myqueue.h	/^struct stailq_s$/;"	s
stailq_set_node_data	myqueue.h	122;"	d
stailq_swap	myqueue.h	177;"	d
stailq_t	myqueue.h	/^typedef struct stailq_s stailq_t;$/;"	t	typeref:struct:stailq_s
start	mysch_struct.h	/^    long start;$/;"	m	struct:cond_s
status	mysch_struct.h	/^    int status;$/;"	m	struct:prog_s
stqe_next	myqueue.h	/^    struct stailq_node_s* stqe_next; \/* next element*\/$/;"	m	struct:stailq_node_s	typeref:struct:stailq_node_s::stailq_node_s
stqh_first	myqueue.h	/^    struct stailq_node_s *stqh_first;\/* first element *\/         \\$/;"	m	struct:stailq_s	typeref:struct:stailq_s::stailq_node_s
stqh_last	myqueue.h	/^    struct stailq_node_s **stqh_last;\/* addr of last next element *\/     \\$/;"	m	struct:stailq_s	typeref:struct:stailq_s::stailq_node_s
sw_day	log.c	/^    int   sw_day;$/;"	m	struct:file_log	file:
switch_size	log.c	/^    int   switch_size;$/;"	m	struct:file_log	file:
switch_time	log.c	/^    int   switch_time;$/;"	m	struct:file_log	file:
table	dict.h	/^    dict_entry **table;$/;"	m	struct:dictht
table	dict.h	/^    int table, index, safe;$/;"	m	struct:dict_iterator
tail	dlist.h	/^    list_node *tail;\/*$/;"	m	struct:list
tailq_concat	myqueue.h	312;"	d
tailq_create	myqueue.c	/^tailq_t* tailq_create()$/;"	f
tailq_destroy	myqueue.c	/^void tailq_destroy(tailq_t* tailq)$/;"	f
tailq_empty	myqueue.h	306;"	d
tailq_first	myqueue.h	307;"	d
tailq_init	myqueue.h	302;"	d
tailq_insert_after	myqueue.h	321;"	d
tailq_insert_before	myqueue.h	332;"	d
tailq_insert_head	myqueue.h	339;"	d
tailq_insert_tail	myqueue.h	349;"	d
tailq_last	myqueue.h	308;"	d
tailq_next	myqueue.h	309;"	d
tailq_node_create	myqueue.c	/^tailq_node_t* tailq_node_create(void* data, fn_free_t fn_free)$/;"	f
tailq_node_data	myqueue.h	299;"	d
tailq_node_destroy	myqueue.c	/^void tailq_node_destroy(tailq_node_t* node)$/;"	f
tailq_node_s	myqueue.h	/^struct tailq_node_s$/;"	s
tailq_node_t	myqueue.h	/^typedef struct tailq_node_s tailq_node_t;$/;"	t	typeref:struct:tailq_node_s
tailq_prev	myqueue.h	310;"	d
tailq_remove	myqueue.h	356;"	d
tailq_s	myqueue.h	/^struct tailq_s$/;"	s
tailq_set_node_data	myqueue.h	300;"	d
tailq_swap	myqueue.h	366;"	d
tailq_t	myqueue.h	/^typedef struct tailq_s tailq_t;$/;"	t	typeref:struct:tailq_s
tc	test/ctest.h	/^    char tc[128];$/;"	m	struct:__test_case
teardown	test/ctest.h	/^    void (*teardown)();$/;"	m	struct:__test_fixture
teardown_env	test/ctest.h	/^    void (*teardown_env)();$/;"	m	struct:__test
teardown_testcase	test/ctest.h	/^    void (*teardown_testcase)();$/;"	m	struct:__test_fixture
test	test/ctest.h	/^    __test_case_t* test;$/;"	m	struct:__test_case_entry
test	test/ctest.h	/^    __test_fixture_t* test;$/;"	m	struct:__test_fixture_entry
test	test/ctest.h	/^    void (*test)();$/;"	m	struct:__test_case
tf	test/ctest.h	/^    char tf[128];$/;"	m	struct:__test_case
time	mysch_struct.h	/^    long time;$/;"	m	struct:prog_s
time_in_milliseconds	dict.c	/^long long time_in_milliseconds(void)$/;"	f
tqe_next	myqueue.h	/^    struct tailq_node_s *tqe_next;   \/* next element *\/$/;"	m	struct:tailq_node_s	typeref:struct:tailq_node_s::tailq_node_s
tqe_prev	myqueue.h	/^    struct tailq_node_s **tqe_prev;  \/* address of previous next element *\/$/;"	m	struct:tailq_node_s	typeref:struct:tailq_node_s::tailq_node_s
tqh_first	myqueue.h	/^    struct tailq_node_s *tqh_first;\/* first element *\/$/;"	m	struct:tailq_s	typeref:struct:tailq_s::tailq_node_s
tqh_last	myqueue.h	/^    struct tailq_node_s **tqh_last; \/* addr of last next element *\/$/;"	m	struct:tailq_s	typeref:struct:tailq_s::tailq_node_s
trim	util.c	/^const char* trim(const char* text, const char* needle, char* dest, int size)$/;"	f
trim_left	util.c	/^const char* trim_left(const char* text, const char* needle, char* dest, int size)$/;"	f
trim_right	util.c	/^const char* trim_right(const char* text, const char* needle, char* dest, int size)$/;"	f
uninit_cb_fun	log.c	/^    log_callback_uninit_t uninit_cb_fun;$/;"	m	struct:call_back	file:
uninit_context	mysch.c	/^void uninit_context(sch_info_t* info)$/;"	f
update_pid	mysch.c	/^int update_pid(prog_t* prog)$/;"	f
update_pid	mysch_struct.h	/^    int update_pid;$/;"	m	struct:prog_s
usage	mysch.c	/^void usage()$/;"	f
used	dict.h	/^    unsigned long used;$/;"	m	struct:dictht
user	mysch_struct.h	/^    char user[64];$/;"	m	struct:prog_s
v	iniconf.c	/^    char v[INI_MAX_VALUE_LEN];$/;"	m	struct:ini_kv_s	file:
val	dict.h	/^    void *val;$/;"	m	struct:dict_entry
vallen	dict.h	/^    unsigned int vallen;$/;"	m	struct:dict_entry
value	dlist.h	/^    void *value;$/;"	m	struct:list_node
w_pos	log.c	/^    int   w_pos;$/;"	m	struct:file_log	file:
w_size	log.c	/^    int   w_size;$/;"	m	struct:file_log	file:
waitq	mysch_struct.h	/^    prog_wait_t* waitq;$/;"	m	struct:sch_info_s
write_pid_file	util.c	/^int write_pid_file(const char* file)$/;"	f
